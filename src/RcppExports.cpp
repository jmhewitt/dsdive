// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/dsdive.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// expmAtv_cpp
Eigen::VectorXd expmAtv_cpp(Eigen::MatrixXd evecs, Eigen::VectorXd evals, Eigen::VectorXd v, Eigen::VectorXd d, Eigen::VectorXd dInv, double t, bool preMultiply);
RcppExport SEXP _dsdive_expmAtv_cpp(SEXP evecsSEXP, SEXP evalsSEXP, SEXP vSEXP, SEXP dSEXP, SEXP dInvSEXP, SEXP tSEXP, SEXP preMultiplySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type evecs(evecsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type evals(evalsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type v(vSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type d(dSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type dInv(dInvSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type preMultiply(preMultiplySEXP);
    rcpp_result_gen = Rcpp::wrap(expmAtv_cpp(evecs, evals, v, d, dInv, t, preMultiply));
    return rcpp_result_gen;
END_RCPP
}
// expm_cpp
Rcpp::List expm_cpp(Eigen::MatrixXd A, double delta, double t, double tol);
RcppExport SEXP _dsdive_expm_cpp(SEXP ASEXP, SEXP deltaSEXP, SEXP tSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(expm_cpp(A, delta, t, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dsdive_expmAtv_cpp", (DL_FUNC) &_dsdive_expmAtv_cpp, 7},
    {"_dsdive_expm_cpp", (DL_FUNC) &_dsdive_expm_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_dsdive(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
