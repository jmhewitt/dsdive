% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dsdive.obstx.matrix_interpolator.R
\name{dsdive.obstx.matrix_interpolator}
\alias{dsdive.obstx.matrix_interpolator}
\title{Compute probability transition matrix for partially observed CTMC}
\usage{
dsdive.obstx.matrix_interpolator(
  depth.bins,
  beta.seq,
  lambda.seq,
  s0,
  tstep.seq,
  m,
  verbose = FALSE
)
}
\arguments{
\item{depth.bins}{\eqn{n x 2} Matrix that defines the depth bins.  The first 
column defines the depth at the center of each depth bin, and the second 
column defines the half-width of each bin.}

\item{s0}{the stage for which to compute the transition matrix}

\item{beta}{the current depth bin transition model parameters}

\item{lambda}{the current depth bin transition rate model parameters}

\item{tstep}{Time between observations of the CTMC}

\item{include.raw}{\code{TRUE} to include raw components of the probability
transition matrix so that the matrix can be computed for arbitrary 
timesteps}

\item{delta}{If \code{delta>0}, then the observation matrix and raw 
components computed will be for a transition matrix whose generator is 
perturbed to allow much faster computation.}
}
\description{
Given model parameters, this function will compute the probability transition 
matrix for a Continuous time Markov chain (CTMC) that is observed once, and 
then again at a time of \code{tstep} units of time later.  If 
\code{include.raw==TRUE}, then raw components of the probability transition 
matrix will be returned so that the transition matrix can be computed for 
arbitrary timesteps.
}
\examples{
data('dive.sim')
attach(dive.sim)

# support for descent directional preferences
beta.seq = seq(.5, 1, length.out = 7)
beta.seq[length(beta.seq)] = .999

# support for descent speeds
lambda.seq = seq(.1, 2, length.out = 7)

# support for timesteps
tstep.seq = seq(0, 300, by = 100)

# build interpolating function
interpolator = dsdive.obstx.matrix_interpolator(
  depth.bins = depth.bins, beta.seq = beta.seq, lambda.seq = lambda.seq, 
  s0 = 1, tstep.seq = tstep.seq, m = 3, verbose = FALSE)

interpolator(beta = .8, lambda = 1, tstep = 300, i = 1, j = 4)

detach(dive.sim)
}
