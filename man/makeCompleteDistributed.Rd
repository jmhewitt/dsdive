% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/makeCompleteDistributed.R
\name{makeCompleteDistributed}
\alias{makeCompleteDistributed}
\title{Initialize a computing environment for use with gibbs sampling}
\usage{
makeCompleteDistributed(dives, depth.bins, cl, init, priors)
}
\arguments{
\item{dives}{Vector of file paths OR a list of dive data.
\itemize{
  \item If \code{dives} is a vector, then it must contain to file paths 
    to csv files that contain dive trajectory information.  The csv must 
    have labeled columns, and include \code{depths} and \code{times}
    columns.  If the dives are completely observed, then columns for 
    \code{durations} and \code{stages} should also be present.  
    By default, the first time value will be used as 
    \code{t0.dive} during estimation.
  \item If \code{dives} is a list, then each entry must be a list that 
    contains \code{depths}, \code{times}, and \code{t0.dive}.
}}

\item{depth.bins}{Vector of file paths OR a list of depth bins associated
with dive data.  The \code{depth.bins} parameter is used in a similar 
fashion as the \code{dives} parameter is.  The individual \code{depth.bins}
objects or files must include columns or objects for depth bin 
\code{center} and \code{halfwidth} values.  As a usage note, if multiple 
\code{dives} need to use the same depth bin information, then the depth 
bin file paths or objects should be duplicated.}

\item{cl}{A SNOW cluster object specifying nodes where computations will take
place, and to which dive and depth bin information should be distributed.}
}
\description{
Initialize a computing environment for use with gibbs sampling
}
\examples{
data('dive.sim')
attach(dive.sim)
attach(dive.sim$params)

spec = list(beta.sd = rep(1, 3), beta.absmax = 5, lambda.sd = 1, 
            sub.tx.mean = 0, sub.tx.sd = 1, surf.tx.mean = 0, surf.tx.sd = 1)

cl = snow::makeCluster(spec = 1, type = 'SOCK')

cfg = makeCompleteDistributed(dives = list(sim, sim), 
                              depth.bins = list(depth.bins, depth.bins), 
                              cl = cl, init = params, priors = spec, 
                              inflation.factor.lambda = 1)

snow::stopCluster(cl)

detach(dive.sim$params)
detach(dive.sim)
}
